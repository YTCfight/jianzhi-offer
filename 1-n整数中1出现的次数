//1-n整数中1出现的次数
//方法一（常规方法）
int fun(int input)
{
	int count = 0;
	while (input)
	{ 
		//先算十位数之前的1的个数
		int tmp = input;
		while (tmp>=10)
		{
			tmp/=10;
			if (tmp % 10 == 1)
			{
				count++;
			}
		}
		//计算个位数1的个数
		if (input % 10 == 1)
		{
			count++;
		}
		input--;
	}	
	
	return count;
}
int main()
{
	int input = 0;
	scanf("%d", &input);
	int ret = fun(input);
	printf("1的个数为：%d\n", ret);
	system("pause");
	return 0;
}
//#endif
//方法二（利用数字规律）
//https://www.cnblogs.com/wangkundentisy/p/8946858.html
int fun(int n)
{
	int high = n;//高位即当前位前面的数
	int tmp = 0;//当前位及高位
	int i = 1; //当前位（从右往左走）
	int low = 0;//低位即当前位后面的数
	int cur = 0;//当前位
	int count = 0;
	while (high)
	{
		high = n / pow(10, i);
		tmp = n / pow(10, i - 1);
		low = n - tmp*pow(10, i - 1);
		cur = tmp % 10;
		if (cur < 1)
		{
			count += high*pow(10, i - 1);
		}
		else if (cur>1)
		{
			count += (high + 1)*pow(10, i - 1);
		}
		else
		{
			count += high * pow(10, i - 1) + (low + 1);
		}
		i++;
	}
	return count;
}
int main()
{
	int input = 0;
	scanf("%d", &input);
	int ret = fun(input);
	printf("1的个数为：%d\n", ret);
	system("pause");
	return 0;
}
