class Solution {
    public int movingCount(int m, int n, int k) {
        boolean[][] arr = new boolean[m][n];
        return help(arr, m, n, k, 0, 0);
    }
    public int help(boolean[][] arr, int m, int n, int k, int i, int j) {
        if (i < 0 || j < 0 || i >= m || j >= n || arr[i][j]) {
            return 0;
        }
        if (fun(i) + fun(j) > k) {
            return 0;
        }
        arr[i][j] = true;
        int count = 1;
        count += help(arr, m, n, k, i - 1, j); 
        count += help(arr, m, n, k, i + 1, j); 
        count += help(arr, m, n, k, i, j - 1); 
        count += help(arr, m, n, k, i, j + 1); 
        return count;
    }
    public int fun(int n) {
        int count = 0;
        while(n != 0) {
            count += n % 10;
            n /= 10;
        }
        return count;
    }
}
